import os
import re

# a builder for go
# TODO: check env for proper architecture
gobld = Builder(action = '6g -o $TARGET $SOURCE', suffix = '.6', src_suffix = '.go')

def _find_swig_module(swig_filename):
    with open(unicode(swig_filename)) as f:
        for l in f:
            m = re.match(r'\s*%module\s+(\w+)', l)
            if m:
                return m.group(1)
    return None

# a builder for goswig
def _goswig_emitter(target, source, env):
    module = env.get('MODULE') or _find_swig_module(source[0])
    if module:
        target.append(module + '.go')
        target.append(module + '_gc' + env['CFILESUFFIX'])
    return target, source

goswigbld = Builder(
        action = 'swig -go -c++ $SOURCE',
        src_suffix = '.i',
        suffix = '$SWIGCXXFILESUFFIX',
        emitter = _goswig_emitter,
        )

# a builder for gopack
gopackbld = Builder(action = 'gopack grc $TARGET $SOURCES')

def make_swig_nodes(basename, module, env):
    cfile = env.GoSwig(basename)
    obj = env.Object(cfile[0])
    env.GoObject(module)
    obj1 = env.GoObject(cfile[1])
    obj2 = env.Object(cfile[2], CC = '6c', CPPPATH = os.path.join(os.environ['GOROOT'], 'pkg', 'darwin_amd64'))
    env.GoPack(module + '.a', obj1, obj2)


env = Environment()
env.PrependENVPath('PATH', os.path.join(os.environ['GOROOT'], 'bin'))
env.PrependENVPath('PATH', '/usr/local/bin')
env.SetDefault(CXXFILESUFFIX = ".cxx")
env.Replace(SWIGCXXFILESUFFIX = "_wrap.cxx")
env.Append(SWIGFLAGS = Split('-go -c++'))
env.Append(BUILDERS = { 'GoObject' : gobld })
env.Append(BUILDERS = { 'GoSwig' : goswigbld })
env.Append(BUILDERS = { 'GoPack' : gopackbld })
make_swig_nodes('swig1', 'FirstTest', env)
